// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  smtpConfigs   SmtpConfig[]
  emailTemplates EmailTemplate[]
  campaigns     Campaign[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SmtpConfig {
  id          String    @id @default(cuid())
  name        String
  host        String
  port        Int
  secure      Boolean   @default(false)
  username    String
  password    String
  fromEmail   String
  fromName    String
  isDefault   Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EmailTemplate {
  id          String    @id @default(cuid())
  name        String
  subject     String
  htmlContent String     @db.Text
  parameters  String[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns   Campaign[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Campaign {
  id              String    @id @default(cuid())
  name            String
  status          String    @default("draft") // draft, scheduled, sent, failed
  recipientCount  Int       @default(0)
  templateId      String
  template        EmailTemplate @relation(fields: [templateId], references: [id])
  smtpConfigId    String?
  parameterValues Json?     // Store parameter values for this campaign
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  recipients      Recipient[]
}

model Recipient {
  id          String    @id @default(cuid())
  email       String
  name        String?
  metadata    Json?     // Additional recipient data for parameters
  campaignId  String?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  createdAt   DateTime  @default(now())
}